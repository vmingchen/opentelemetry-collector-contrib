version: 2.1

parameters:
  run-build-publish:
    type: boolean
    default: true
  run-stability-tests:
    type: boolean
    default: false
  collector-sha:
    type: string
    default: ""

orbs:
  win: circleci/windows@2.4.0

executors:
  golang:
    docker:
      - image: cimg/go:1.14
  machine:
    machine:
      image: ubuntu-1604:201903-01

commands:
  setup:
    steps:
      - checkout
      - restore_module_cache
      - run:
          name: Install deps
          command: make -j8 for-all-target TARGET=dep
      - run:
          name: Install tools
          command: make install-tools
      - run:
          name: Install testbed tools
          command: make -C testbed install-tools
      - save_module_cache

  setup_go:
    steps:
      - run:
          name: Install Go 1.14
          command: |
            sudo rm -rf /usr/local/go
            curl -L https://dl.google.com/go/go1.14.4.linux-amd64.tar.gz | sudo tar xz -C /usr/local
      - run:
          name: Add ~/go/bin to PATH
          command: |
            echo 'export PATH=$HOME/go/bin:$PATH' >> $BASH_ENV

  restore_workspace:
    steps:
      - attach_to_workspace
      - restore_module_cache

  attach_to_workspace:
    steps:
      - attach_workspace:
          at: ~/

  save_module_cache:
    steps:
      - save_cache:
          key: cimg-go-pkg-mod-{{ checksum "go.sum" }}-v4
          paths:
            - "/home/circleci/go/pkg/mod"

  restore_module_cache:
    steps:
      - run:
          name: create modules dir
          command: mkdir -p ~/go/pkg/mod
      - restore_cache: # restores saved cache if no changes are detected since last run
          keys:
            - cimg-go-pkg-mod-{{ checksum "go.sum" }}-v4

  publish_docker_images:
    parameters:
      repo:
        type: string
      tag:
        type: string
    steps:
      - run:
          name: Build image
          command: |
            make docker-otelcontribcol
            docker tag otelcontribcol:latest otel/<< parameters.repo >>:<< parameters.tag >>
            docker tag otelcontribcol:latest otel/<< parameters.repo >>:latest
      - run:
          name: Login to Docker Hub
          command: docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
      - run:
          name: Push image
          command: |
            docker push otel/<< parameters.repo >>:<< parameters.tag >>
            docker push otel/<< parameters.repo >>:latest

workflows:
  version: 2
  stability-tests:
    when: << pipeline.parameters.run-stability-tests >>
    jobs:
      - checkout-commit
      - setup:
          requires:
            - checkout-commit
      - cross-compile:
          requires:
            - setup
      - run-stability-tests:
          requires:
            - cross-compile 
      - publish-dev:
          requires:
            - run-stability-tests

  build-publish:
    when: << pipeline.parameters.run-build-publish >>
    jobs:
      - setup:
          filters:
            tags:
              only: /.*/
      - lint:
          requires:
            - setup
          filters:
            tags:
              only: /.*/
      - build-examples:
          requires:
            - setup
          filters:
            tags:
              only: /.*/
      - cross-compile:
          requires:
            - setup
          filters:
            tags:
              only: /.*/
      - loadtest:
          requires:
            - cross-compile 
          filters:
            tags:
              only: /.*/
      - unit-tests:
          requires:
            - setup
          filters:
            tags:
              only: /.*/
      - windows-msi:
          requires:
            - cross-compile
          filters:
            tags:
              only: /.*/
      - publish-stable:
          requires:
            - lint
            - unit-tests
            - integration-tests
            - cross-compile
            - windows-msi
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9].[0-9].[0-9]+.*/
      - spawn-stability-tests-job:
          requires:
            - lint
            - unit-tests
            - integration-tests
            - cross-compile
          filters:
            branches:
              only: /master|release\/.+/
            tags:
              ignore: /.*/
      - integration-tests:
          filters:
            tags:
              only: /.*/

jobs:
  setup:
    executor: golang
    steps:
      - setup
      - persist_to_workspace:
          root: ~/
          paths:
            - project
            - go/bin
  lint:
    executor: golang
    steps:
      - restore_workspace
      - run:
          name: Lint
          command: make -j8 for-all-target TARGET=lint
      - run:
          name: Checks
          command: make -j4 checklicense impi misspell

  build-examples:
    docker:
      - image: cimg/go:1.14
    steps:
      - restore_workspace
      - setup_remote_docker
      - run:
          name: Build examples
          command: make build-examples

  cross-compile:
    executor: golang
    parallelism: 4
    steps:
      - restore_workspace
      - run:
          name: Build collector for all archs
          command: grep ^otelcontribcol-all-sys Makefile|fmt -w 1|tail -n +2|circleci tests split|xargs make
      - persist_to_workspace:
          root: ~/
          paths: project/bin

  unit-tests:
    executor: golang
    steps:
      - restore_workspace
      - run:
          name: Unit test coverage
          command: make unit-tests-with-cover
      - run:
          name: Upload unit test coverage
          command: bash <(curl -s https://codecov.io/bash) -F unit

  loadtest:
    executor: golang
    resource_class: medium+
    steps:
      - restore_workspace
      - run:
          name: Loadtest
          command: make e2e-test
      - store_artifacts:
          path: testbed/tests/results
      - store_test_results:
          path: testbed/tests/results/junit

  windows-msi:
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - attach_to_workspace
      - run:
          name: Install Wix Toolset
          command: .\internal\buildscripts\packaging\msi\make.ps1 Install-Tools
      - run:
          name: Build MSI
          command: |
            $Version = if ($env:CIRCLE_TAG -match '^v(\d+\.\d+\.\d+)') { $Matches[1] } else { "0.0.1" }
            .\internal\buildscripts\packaging\msi\make.ps1 New-MSI -Version $Version
      - run:
          name: Validate MSI
          command: .\internal\buildscripts\packaging\msi\make.ps1 Confirm-MSI
      - persist_to_workspace:
          root: ~/
          paths: project/bin

  publish-stable:
    docker:
      - image: cimg/go:1.14
    steps:
      - restore_workspace
      - setup_remote_docker
      - publish_docker_images:
          repo: opentelemetry-collector-contrib
          tag: ${CIRCLE_TAG:1}
      - run:
          name: Calculate checksums
          command: cd bin && shasum -a 256 * > checksums.txt
      - run:
          name: Create Github release and upload artifacts
          command: ghr -t $GITHUB_TOKEN -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME --replace $CIRCLE_TAG bin/

  publish-dev:
    executor: golang
    steps:
      - restore_workspace
      - setup_remote_docker
      - publish_docker_images:
          repo: opentelemetry-collector-contrib-dev
          tag: ${CIRCLE_SHA1}

  spawn-stability-tests-job:
    executor: golang
    steps:
      - run:
          name: Trigger stability tests job
          command: |
            curl -f -X POST "https://circleci.com/api/v2/project/github/open-telemetry/${CIRCLE_PROJECT_REPONAME}/pipeline?circle-token=${CIRCLE_API_TOKEN}" \
                -H 'Content-Type: application/json' \
                -H 'Accept: application/json' \
                -d '{"parameters": {"run-build-publish": false, "run-stability-tests": true, "collector-sha": "'"${CIRCLE_SHA1}"'"}, "branch": "'"${CIRCLE_BRANCH}"'"}'

  checkout-commit:
    executor: golang
    steps:
      - checkout
      - run:
          name: Checkout pipeline parameter commit
          command: |
            git checkout << pipeline.parameters.collector-sha >>
            git status

  run-stability-tests:
    parameters:
      # Number of runners must be always in sync with number of stability tests,
      # so every node runs exactly one stability test.
      runners-number:
        type: integer 
        default: 9
    executor: golang
    resource_class: medium+
    parallelism: << parameters.runners-number >>
    steps:
      - restore_workspace
      - run:
          no_output_timeout: 70m
          name: Run stability tests
          command: |
            export TESTS=$(make -C testbed -s list-stability-tests)
            export TEST_NUM=$(echo ${TESTS} | wc -w | tr -d '[:space:]')
            if [ "${TEST_NUM}" -ne "<< parameters.runners-number >>" ]; then \
              echo "ERROR: Number of stability tests must match number of CircleCI runners. Update runners-number parameter"; exit 2; \
            fi
            export TEST_NAME=$(echo ${TESTS} | sed 's/ /\n/g' | circleci tests split --total=${TEST_NUM})
            echo "Running ${TEST_NAME}..."
            TEST_ARGS="-test.run=${TEST_NAME}" make stability-tests
      - store_artifacts:
          path: testbed/stabilitytests/results
      - store_test_results:
          path: testbed/stabilitytests/results/junit
      - run:
          name: Run on fail status
          command: |
              curl --request POST \
              --url https://api.github.com/repos/open-telemetry/opentelemetry-collector-contrib/issues \
              --header "authorization: Bearer ${GITHUB_TOKEN}" \
              --header "content-type: application/json" \
              --data '{
                "title": "Stability tests failed in branch '"${CIRCLE_BRANCH}"' for commit << pipeline.parameters.collector-sha >>",
                "body": "Link to failed job: '"${CIRCLE_BUILD_URL}"'."
                }'
          when: on_fail

  integration-tests:
    executor: machine
    environment:
      GOPATH: /home/circleci/go
    steps:
      - setup_go
      - setup
      - run:
          name: Integration tests with coverage
          command: |
            mkdir -p test-results/junit
            trap "go-junit-report -set-exit-code < test-results/go-integration-tests.out > test-results/junit/results.xml" EXIT
            make integration-tests-with-cover | tee test-results/go-integration-tests.out
      - run:
          name: Upload integration test coverage
          command: bash <(curl -s https://codecov.io/bash) -F integration
      - store_test_results:
          path: test-results/junit
      - store_artifacts:
          path: test-results
